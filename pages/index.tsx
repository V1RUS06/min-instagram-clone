import type { GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import React, {useCallback, useEffect, useRef, useState} from "react";
import {CardData, PostsAction, PostsActionType} from "../types/Posts";
import {useRouter} from "next/router";
import {useDispatch} from "react-redux";
import {Dispatch} from "redux";
import {useTypedSelector} from "../hooks/useTypedSelector";
import {useActions} from "../hooks/useAction";


interface Props {
  serverPosts: CardData[]
}


const Posts:NextPage<Props> = ({serverPosts}) => {
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [fetching, setFetching] = useState<boolean>(false);
  const dispatch: Dispatch<PostsAction> = useDispatch();
  const posts = useTypedSelector(state => state.posts.posts);
  const { fetchPosts } = useActions()
  const router = useRouter();

  const scrollContainer = useRef<HTMLDivElement | null>(null)

  // useEffect( () => {
  //   if (fetching) {
  //     try {
  //       fetchPosts(currentPage)
  //       setCurrentPage(prevState => prevState + 1)
  //       setFetching(false)
  //     } catch (e) {
  //       dispatch({type: PostsActionType.FETCH_POSTS_ERROR, payload: 'Постов больше нет'})
  //       setFetching(false)
  //     }
  //   }
  // }, [fetching])

  useEffect(() => {
    console.log('RENDER')
    dispatch({type: PostsActionType.FETCH_POSTS_SUCCESS, payload: serverPosts})
  }, []);


  useEffect(() => {
    if (scrollContainer.current){
      scrollContainer.current.addEventListener('scroll', scrollHandler)
    }
    return function () {
      if (scrollContainer.current) {
        scrollContainer.current.removeEventListener('scroll', scrollHandler)
      }
    }
  }, [])



  const onClickCard = (imgId: number) => {
    router.push(`post/${imgId}`)
  }

  const scrollHandler = useCallback((e: any) => {
    if ((e.target.scrollHeight - (e.target.scrollTop + window.innerHeight - 100)) < 100  ) {
      console.log('scroll')
      setFetching(true)
    }
  },[])

  return (
    <div className={styles.container}>
      <Head>
        <title>Instagram Clone</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main className={styles.main}>
        <div className={styles.flex_container} ref={scrollContainer}>
          {posts.map((item: CardData) => (
              <img
                key={item.id}
                src={`${item.url}`} alt={`post${item.id}`}
                className={styles.card}
                onClick={() => onClickCard(item.id)}
              />
            )
          )}
        </div>
      </main>

    </div>
  )
}

export default Posts



export const getStaticProps: GetStaticProps = async (context ) =>  {

  const response = await fetch(`https://jsonplaceholder.typicode.com/photos?_limit=21&_page=0`)
  const serverPosts = await response.json()
  console.log('server req>>>')

  return {
    props: {serverPosts}
  }
}
